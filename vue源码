Vue源码类型检查：
flow：在编译阶段进行静态类型检查 避免运行时出现意外错误
类型检查和类型推断

Vue源码目录：

src
├── compiler        # 编译相关 
├── core            # 核心代码 
├── platforms       # 不同平台的支持
├── server          # 服务端渲染
├── sfc             # .vue 文件解析
├── shared          # 共享代码

1. core 
  -- components(keep-alive)
  -- global-api(assets、extend、mixin、use)
  -- instance(render-helps、index(定义vue)\events\init\inject\lifecycle\proxy\render等)
  -- observer
  -- util
  -- vdom
2. platforms 
    -- web: 网页开发相关源码
    -- weex: 跨端应用开发，平台相关的
3. shared:  vue.js工具方法（浏览器服务端公用）

package.json文件：
main：import vue的入口文件
module：和main类似 2.0以下版本的入口文件
script：执行不同脚本任务

dist目录下的js文件：vue编译后导出的不同格式的js(CMD,ES6版本等等)
vue.js ： vue.js则是直接用在<script>标签中的，完整版本，直接就可以通过script引用。
vue.common.js :预编译调试时，CommonJS规范的格式，可以使用require("")引用的NODEJS格式。
vue.esm.js：预编译调试时， EcmaScript Module（ES MODULE)，支持import from 最新标准的。
vue.runtime.js ：生产的运行时，需要预编译，比完整版小30%左右，前端性能最优
vue.runtime.esm.js：生产运行时，esm标准。
vue.runtime.common.js:生产运行时，commonJS标准。

runtime only VS runtime+compile
runtime only：需要借助webpack的vue-loader工具将.vue文件编译成JavaScript，因为是在编译阶段做的，它只包含了需要运行的vue代码，代码体积会更小。（推荐）
runtime+compile：没有做预编译。在vue2.0版本中，最终渲染都是通过render函数，如果有template属性，需要编译成render函数，编译过程发生在运行时，需要编译器来编译。

1.数据驱动
Vue.js 一个核心思想是数据驱动。数据驱动，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据。

1）new Vue时：(src/core/instance/index.js)
Vue 初始化主要，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。

2）init:   (src/core/instance/init.js)
源码中Vue定义的是一个方法，在vue的prototype上挂载原型方法（
initMixin(Vue)
stateMixin(Vue)
eventsMixin(Vue)
lifecycleMixin(Vue)
renderMixin(Vue)），在vue对象上扩展全局静态方法（api）（
initUse(Vue)
initMixin(Vue)
initExtend(Vue)
initAssetRegisters(Vue)
delete
nextick
），
挂载内置组件（component，directive,keepalive,fliter...)

对vm的options做合并，做一堆
initLifecycle(vm)
    initEvents(vm)
    initRender(vm)
    callHook(vm, 'beforeCreate')
    initInjections(vm) // resolve injections before data/props
    initState(vm)
    initProvide(vm) // resolve provide after data/props
    callHook(vm, 'created')
初始化，对data做响应式处理，调用vm.$mount挂载到dom实例上。


3）$mount挂载做了什么（runtime+compile）：
(src/platform/web/runtime/index.js)  通用$mount
(src/platform/web/entry-runtime-with-compiler.js) 重写$mount
重写$mount方法：将template或el转换成render函数，调用compileToFunction方法在线编译，调用原型上的$mount方法挂载（runtime only版本复用）。

$mount支持两个参数：el(字符串或dom对象)要挂载的元素；hydrating（Boolean）与服务端渲染有关
$mount 方法实际上会去调用 mountComponent 方法， mountComponent 核心是实例化一个渲染watcher，调用updateCpmponent方法，在此方法中调用vm._render生成虚拟node，再调用vm._update更新dom  （src/core/instance/lifecycle）

4）vm._render:  vm._render 最终是通过执行 createElement 方法并返回的是 vnode（标签节点或组件），它是一个虚拟 Node。(src/core/instance/render.js)

createElement:  接受5个参数。children参数的规范化（多维数组拍平），每个 VNode 有 children，children 每个元素也是一个 VNode，这样就形成了一个 VNode Tree，它很好的描述了我们的 DOM Tree。

5）Vnode（描述dom的js对象）：
为什么使用virtual dom：
真正的dom元素非常庞大，当我们频繁修改dom时，对浏览器会产生一定的性能问题。virtual dom用原生js对象描述dom元素，相比于创建dom要代价更小。vue中用vnode类（tag，element，data，children，text，key等等）定义了virtual dom。vnode只是用来映射到真实的dom渲染，不包含操作dom的方法，因此非常简单轻量。

Virtual DOM 除了它的数据结构的定义，映射到真实的 DOM 实际上要经历 VNode 的 create、diff、patch 等过程。

6）vm._update: 调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候。vm._update的核心就是执行patch方法（浏览器环境下）。patch方法将vnode编译成真实dom树，替换并挂载到oldVnode的父节点上。(src/core/instance/lifecycle.js)(src/platforms/web/runtime/index.js)


数据驱动流程图：


2.组件化
我们通过 createComponent 创建了组件 VNode，接下来会走到 vm._update，执行 vm.__patch__ 去把 VNode 转换成真正的 DOM 节点。
1）组件render，渲染成vnode：(src/core/vdom/create-component.js)
createElment方法主要是将标签或组件转换成vnode，当tag判断不是string时，调用createComponent创建组件vnode。
1.构造子类构造函数。extend Vue
2.安装组件钩子函数。installConponentHooks方法：将钩子函数合并到data.hook中，在vnode执行	       patch时执行这些钩子函数（init,prepatch,insert,destory）。
3.实例化vnode。

2）组件patch
patch流程：createComponent -> 子组件初始化(init，crateComponentForVnode，合并lifecycle) -> 子组件render -> 子组件patch（若子组件中还有组件，继续执行）
init （src/core/vdom/create-component.js）

1.activeInstance为当前激活的vm实例，vm.$vnode为组件的占位vnode，vm._vnode为组件的渲染vnode
2.嵌套组件插入顺序是先子后父


newVue  -> init -> $mount -> complie -> render -> vnode -> patch  -> dom
render -> tag(String) -> ...
    -> component  -> render -> createElement -> createComponent ->组件初始化 ->  	                    										                   					    	new Vnode() -> Vnode -> _patch_  -> createPatchFunction -> createEle -> createComponent ->
-> init(component) -> createComponentInstanceForVnode ->  vnode.componentOptions.Ctro(options)  ->  new Sub(options) ->   _init(options)组件实例化  ->  initInternalComponent (合并配置)   -> vm.$mount()（开始）  ->  mountComponent -> 

3）合并配置 mergeOption（src/core/util/options.js）
new Vue 的过程通常有 2 种场景，（src/core/instance/init.js）
外部调用场景（mergeOption）：外部我们的代码主动调用 new Vue(options) 的方式实例化一个 Vue 对象；
组件场景（initInternalComponent）：组件过程中内部通过 new Vue(options) 实例化子组件。
无论哪种场景，都会执行实例的 _init(options) 方法，它首先会执行一个 merge options 的逻辑。

在大Vue中添加全局的mixin等配置时，在new Vue时会通过mergeOption合并，先递归把 extends 和 mixins 合并到 parent 上，然后遍历 parent，调用 mergeField，然后再遍历 child，如果 key 不在 parent 的自身属性上，则调用 mergeField。
组件合并options通过initInternalComponent方法，组件的构造函数是通过 Vue.extend 继承自 Vue，通过mergeOption将Super.options和当前组件options合并到实例sub.option上

子组件初始化过程通过 initInternalComponent 方式要比外部初始化 Vue 通过 mergeOptions 的过程要快，合并完的结果保留在 vm.$options 中
合并类型：（data，lifecycle，props，assets，methods,computed）

4）生命周期   (src/core/instance/lifecycle)
callhook(vm,'created') :根据传入的字符串 hook，去拿到 vm.$options[hook] 对应的回调函数数组，然后遍历执行，执行的时候把 vm 作为函数执行的上下文。

beforeCreate 和 created 函数都是在实例化 Vue 的阶段，在 _init 方法中执行的。
beforeCreate 和 created 的钩子调用是在 initState 的前后，initState 的作用是初始化 props、data、methods、watch、computed 等属性。 beforeCreate 的钩子函数中就不能获取到 props、data 中定义的值，也不能调用 methods 中定义的函数。
beforeCreated：initLifecycle(vm),initEvents(vm), initRender(vm)之后执行
created： initInjections(vm)，initState(vm)，initProvide(vm) 之后执行
beforemount：在执行 vm._render() 函数渲染 VNode 之前，执行了 beforeMount 钩子函数，顺序先父后子
mounted：在执行完 vm._update() 把 VNode patch 到真实 DOM 后，执行 mounted 钩子。顺序先子后父。组件是在insert函数中执行mounted函数
beforeUpdate：执行时机是在渲染 Watcher 的 before 函数中
Updated：vm._watcher 的回调执行完毕后，才会执行 updated 钩子函数
beforeDestory：执行时机是在 $destroy 函数执行最开始的地方，接着执行了一系列的销毁动作，包括从 parent 的 $children 中删掉自身，删除 watcher，当前渲染的 VNode 执行销毁钩子函数等，执行完毕后再调用 destroy 钩子函数。
destoryed：执行 vm.__patch__(vm._vnode, null) 触发它子组件的销毁钩子函数，这样一层层的递归调用，destroy 钩子函数执行顺序是先子后父

created可以访问数据，mounted可以访问到dom，destoryed中做一些定时器销毁工作。

5）全局组件和局部组件
1.全局组件扩展在大vue的options.component上，局部组件扩展在sub.options.component.
2.基础组件建议全局注册，业务组件建议局部注册

6） 异步组件
在我们平时的开发工作中，为了减少首屏代码体积，往往会把一些非首屏的组件设计成异步组件，按需加载。Vue 也原生支持了异步组件的能力。
异步组件三种实现方式：
1.普通函数异步组件 ：require(['./my-async-component'], resolve)
2.promise异步组件 ：() => import('./my-async-component')
3.高级异步组件：
const AsyncComp = () => ({
  component: import('./MyComp.vue'),
  loading: LoadingComp,
  error: ErrorComp,
  // 渲染加载中组件前的等待时间。默认：200ms。
  delay: 200,
  timeout: 3000
})
Vue.component('async-example', AsyncComp)

异步组件实现的本质是两次渲染，先渲染成注释节点，等组件加载成功后，调用forceRender重新渲染。


3.响应式原理
1）响应式对象
Object.defineProperty(obj, prop, descriptor)
obj 是要在其上定义属性的对象；prop 是要定义或修改的属性的名称；descriptor 是将被定义或修改的属性描述符。

1.响应式对象核心运用了Object.defineProperty给对象属性添加getter和setter。
2.Vue会把props，data，computed等变成响应式对象，创建过程中，发现子属性也是对象则递归把该对象变成响应式。

observe 的功能就是用来监测数据的变化（src/core/observer/index.js）
observe的作用就是个非 VNode 的对象类型数据添加一个 Observer，如果已经添加过则直接返回，否则在满足一定条件下去实例化一个 Observer 对象实例。
Observer 的构造函数逻辑很简单，首先实例化 Dep 对象，接着通过执行 def 函数把自身实例添加到数据对象 value 的 __ob__ 属性上。
Observer 的构造函数，接下来会对 value 做判断，对于数组会调用 observeArray 方法，否则对纯对象调用 walk 方法。可以看到 observeArray 是遍历数组再次调用 observe 方法，而 walk 方法是遍历对象的 key 调用 defineReactive 方法，
defineReactive 函数最开始初始化 Dep 对象的实例，接着拿到 obj 的属性描述符，然后对子对象递归调用 observe 方法，这样就保证了无论 obj 的结构多复杂，它的所有子属性也能变成响应式的对象，这样我们访问或修改 obj 中一个嵌套较深的属性，也能触发 getter 和 setter。最后利用 Object.defineProperty 去给 obj 的属性 key 添加 getter 和 setter。

2）依赖收集（getter）
1.依赖收集就是订阅数据变化的watcher的收集。
2.依赖收集的目的是当这些响应式数据发生变化，出发它们setter的时候，能知道应该通知那些订阅者去做响应的逻辑处理。

defineReactive (src/core/observer/index.js) ：一个是 const dep = new Dep() 实例化一个 Dep 的实例，另一个是在 get 函数中通过 dep.depend 做依赖收集。
dep (src/core/observer/dep.js)：Dep 是整个 getter 依赖收集的核心

3) 派发更新（setter）



